{"version":3,"sources":["../src/dmmfToSchema.ts","../src/util/parser.ts","../src/schemaToDmmf.ts","../src/index.ts"],"sourcesContent":["import { type DMMF } from \"@prisma/generator-helper\";\nimport { formatSchema, type ConfigMetaFormat } from \"@prisma/internals\";\nimport {\n  datasourcesDeserializer,\n  dmmfEnumsDeserializer,\n  dmmfModelsdeserializer,\n  generatorsDeserializer,\n} from \"./util/parser\";\n\nexport const dmmfToSchema = async ({\n  dmmf: { models, enums },\n  config: { datasources, generators },\n}: {\n  dmmf: DMMF.Document[\"datamodel\"];\n  config: ConfigMetaFormat;\n}) => {\n  const outputSchema = [\n    datasourcesDeserializer(datasources),\n    generatorsDeserializer(generators),\n    dmmfModelsdeserializer(models),\n    dmmfEnumsDeserializer(enums),\n  ]\n    .filter((e) => e)\n    .join(\"\\n\\n\\n\");\n\n  return await formatSchema({ schema: outputSchema });\n};\n","/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport {\n  type ConnectorType,\n  type DataSource,\n  type DMMF,\n  type EnvValue,\n  type GeneratorConfig,\n} from \"@prisma/generator-helper\";\nimport { printGeneratorConfig } from \"@prisma/engine-core\";\n\nexport interface Field {\n  kind: DMMF.FieldKind;\n  name: string;\n  isRequired: boolean;\n  isList: boolean;\n  isUnique: boolean;\n  isId: boolean;\n  type: string;\n  dbNames: string[] | null;\n  isGenerated: boolean;\n  hasDefaultValue: boolean;\n  relationFromFields?: any[];\n  relationToFields?: any[];\n  relationOnDelete?: string;\n  relationName?: string;\n  default: boolean | any;\n  isUpdatedAt: boolean;\n  isReadOnly: string;\n  columnName?: string;\n}\n\nexport interface Attribute {\n  isUnique: boolean;\n  isId: boolean;\n  dbNames: string[] | null;\n  relationFromFields?: any[];\n  relationToFields?: any[];\n  relationOnDelete?: string;\n  relationName?: string;\n  isReadOnly: string;\n  default?: boolean | any;\n  isGenerated: boolean;\n  isUpdatedAt: boolean;\n  columnName?: string;\n  comment?: string;\n}\n\ntype AttributeHandler = (value: unknown, kind: DMMF.FieldKind) => string;\n\nconst attributeHandlers: Record<string, AttributeHandler> = {\n  default: (value: unknown, kind: DMMF.FieldKind) => {\n    if (Array.isArray(value)) {\n      if (\n        kind === \"enum\" ||\n        typeof value === \"number\" ||\n        typeof value === \"boolean\"\n      ) {\n        // ex. @default([hi]), enums, numbers, booleans default values should be with out \" \"\n        return `@default(${JSON.stringify(value).replaceAll(`\"`, \"\")})`;\n      }\n      // ex. @default([\"hi\"])\n      return `@default(${JSON.stringify(value)})`;\n    }\n    if (\n      kind === \"enum\" ||\n      typeof value === \"number\" ||\n      typeof value === \"boolean\"\n    ) {\n      return `@default(${value})`;\n    }\n    if (typeof value === \"string\") {\n      return `@default(\"${value}\")`;\n    }\n    if (typeof value === \"object\") {\n      // ex. { name: 'autoincrement', args: [] } -> @default(autoincrement())\n      const defaultObject = value as { name: string; args: string };\n      return `@default(${defaultObject.name}(${defaultObject.args}))`;\n    }\n    return \"\";\n  },\n  isId: (value: unknown) => (value ? \"@id\" : \"\"),\n  isUnique: (value: unknown) => (value ? \"@unique\" : \"\"),\n  native: (value: unknown) => (value ? `${value}` : \"\"),\n  isUpdatedAt: (value: unknown) => (value ? \"@updatedAt\" : \"\"),\n  dbName: (value: unknown) => (value ? `@map(\"${value}\")` : \"\"),\n  columnName: (value: unknown) => (value ? `@map(\"${value}\")` : \"\"),\n  comment: (value: unknown) => (value ? `//${value}` : \"\"),\n};\n\nfunction handleAttributes(attributes: Attribute, kind: DMMF.FieldKind) {\n  const { relationFromFields, relationToFields, relationName } = attributes;\n\n  if (kind === \"object\" && relationFromFields) {\n    return relationFromFields.length > 0\n      ? `@relation(name: \"${relationName}\", fields: [${relationFromFields}], references: [${relationToFields}])`\n      : `@relation(name: \"${relationName}\") ${\n          attributes?.comment ? \"//\" + attributes.comment : \"\"\n        }`;\n  }\n\n  return Object.entries(attributes)\n    .map(([key, value]) => attributeHandlers[key]?.(value, kind) ?? \"\")\n    .join(\" \");\n}\n\nfunction handleFields(fields: Field[]) {\n  return fields\n    .map((fields) => {\n      const { name, kind, type, isRequired, isList, ...attributes } = fields;\n      if ((kind as any) === \"comment\") {\n        return `//${name}`;\n      }\n\n      const fieldAttributes = handleAttributes(attributes, kind);\n      return `${name} ${type}${\n        isList ? \"[]\" : isRequired ? \"\" : \"?\"\n      } ${fieldAttributes}`;\n    })\n    .join(\"\\n\");\n}\n\nfunction handlePrimaryKey(primaryKeys?: DMMF.PrimaryKey | null) {\n  if (!primaryKeys || !primaryKeys.fields || primaryKeys.fields.length === 0)\n    return \"\";\n  return `@@id([${primaryKeys.fields.join(\", \")}])`;\n}\n\nfunction handleUniqueFields(uniqueFields: string[][]) {\n  return uniqueFields.length > 0\n    ? uniqueFields\n        .map((eachUniqueField) => `@@unique([${eachUniqueField.join(\", \")}])`)\n        .join(\"\\n\")\n    : \"\";\n}\n\nfunction handleDbName(dbName: string | null) {\n  return dbName ? `@@map(\"${dbName}\")` : \"\";\n}\n\nfunction handleUrl(envValue: EnvValue) {\n  const value = envValue.fromEnvVar\n    ? `env(\"${envValue.fromEnvVar}\")`\n    : envValue.value;\n\n  return `url = ${value}`;\n}\n\nfunction handleProvider(provider: ConnectorType | string) {\n  return `provider = \"${provider}\"`;\n}\n\nfunction deserializeModel(model: DMMF.Model) {\n  const {\n    name,\n    uniqueFields,\n    dbName,\n    primaryKey,\n    index,\n    startComments = [],\n    endComments = [],\n  } = model;\n  const indexs = index;\n  const fields = model.fields as unknown as Field[];\n\n  const output = `\n${startComments.map((c) => \"// \" + c).join(\"\\n\")}\n\nmodel ${name} {\n${handleFields(fields)}\n${handleUniqueFields(uniqueFields)}\n${handleDbName(dbName)}\n${handlePrimaryKey(primaryKey)}\n${indexs?.join(\"\\n\") || \"\"}\n}\n\n${endComments.map((c) => \"// \" + c).join(\"\\n\")}\n`;\n  return output;\n}\n\nfunction deserializeDatasource(datasource: DataSource) {\n  const { activeProvider: provider, name, url } = datasource;\n\n  return `\ndatasource ${name} {\n\t${handleProvider(provider)}\n\t${handleUrl(url)}\n}`;\n}\n\nfunction deserializeEnum({ name, values, dbName }: DMMF.DatamodelEnum) {\n  const outputValues = values.map(({ name, dbName }) => {\n    let result = name;\n    if (name !== dbName && dbName) result += `@map(\"${dbName}\")`;\n    return result;\n  });\n  return `\nenum ${name} {\n\t${outputValues.join(\"\\n\\t\")}\n\t${handleDbName(dbName || null)}\n}`;\n}\n\nexport function dmmfModelsdeserializer(models: DMMF.Model[]) {\n  return models.map((model) => deserializeModel(model)).join(\"\\n\");\n}\n\nexport function datasourcesDeserializer(datasources: DataSource[]) {\n  return datasources\n    .map((datasource) => deserializeDatasource(datasource))\n    .join(\"\\n\");\n}\n\nexport function generatorsDeserializer(generators: GeneratorConfig[]) {\n  return generators\n    .map((generator) => printGeneratorConfig(generator as never))\n    .join(\"\\n\");\n}\n\nexport function dmmfEnumsDeserializer(enums: DMMF.DatamodelEnum[]) {\n  return enums.map((each) => deserializeEnum(each)).join(\"\\n\");\n}\n","import { getConfig, getDMMF } from \"@prisma/internals\";\nimport stripAnsi from \"strip-ansi\";\n\nexport interface SchemaError {\n  reason: string;\n  row: string;\n}\n\nexport enum ErrorTypes {\n  Prisma,\n  Other,\n}\n\nexport const schemaToDmmf = async (schema: string) => {\n  try {\n    const { datamodel } = await getDMMF({\n      datamodel: schema,\n    });\n    const config = await getConfig({\n      datamodel: schema,\n      ignoreEnvVarErrors: true,\n    });\n\n    const lines = schema.split(\"\\n\");\n    let model = \"\";\n    let isOutsideModel = false;\n    let startComments: string[] = [];\n    lines.forEach((line, index) => {\n      if (line.includes(\"model\")) {\n        model = (line || \"\").trim().split(\" \")[1];\n        isOutsideModel = false;\n        const dataModel = datamodel.models.find((m) => m.name === model);\n        if (startComments.length > 0 && typeof dataModel !== \"undefined\") {\n          dataModel.startComments = [...startComments];\n          startComments = [];\n        }\n      }\n      if (line.includes(\"@db\")) {\n        const lineWords = (line || \"\").trim().split(\" \");\n        const field = lineWords[0];\n        const nativeAttribute = lineWords.find((word) => word.includes(\"@db\"));\n        const dmmfModel = datamodel.models.find((m) => m.name === model);\n        const dmmfField = dmmfModel?.fields.find((f) => f.name === field);\n\n        if (dmmfField) dmmfField[\"native\"] = nativeAttribute;\n      }\n      if (line.includes(\"//\")) {\n        const dmmfModel = datamodel.models.find((m) => m.name === model);\n        const lineWords = (line || \"\").trim().split(\" \");\n        const comment = (line || \"\").trim().split(\"//\")[1];\n        const isCommentLine = lineWords[0].includes(\"//\");\n        if (!isCommentLine) {\n          const field = lineWords[0];\n          const dmmfField = dmmfModel?.fields.find((f) => f.name === field);\n          if (dmmfField) dmmfField[\"comment\"] = comment;\n        } else {\n          const lastLine = lines[index - 1];\n          const lineWords = (lastLine || \"\").trim().split(\" \");\n          const field = lineWords[0];\n          if (field === \"model\") {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            dmmfModel?.fields.unshift({\n              kind: \"comment\",\n              name: comment,\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            } as any);\n          } else if (isOutsideModel) {\n            startComments.push((comment || \"\").trim());\n          } else {\n            const dmmfFieldIndex = dmmfModel?.fields.findIndex(\n              (f) => f.name === field\n            );\n            if (dmmfFieldIndex) {\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n              dmmfModel?.fields.splice(dmmfFieldIndex + 1, 0, {\n                kind: \"comment\",\n                name: comment,\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              } as any);\n            } else {\n              startComments.push(comment);\n            }\n          }\n        }\n      }\n      if (line.includes(\"@@index\")) {\n        const index = (line || \"\").trim();\n        const dmmfModel = datamodel.models.find((m) => m.name === model);\n\n        if (dmmfModel)\n          dmmfModel[\"index\"] = [\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            ...(Array.isArray(dmmfModel[\"index\"]) ? dmmfModel[\"index\"] : []),\n            index,\n          ];\n      }\n      if (line.includes(\"}\")) {\n        isOutsideModel = true;\n      }\n    });\n\n    if (startComments.length > 0) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      datamodel.models.find((m) => m.name === model)!.endComments = [\n        ...startComments,\n      ];\n    }\n\n    return { datamodel, config };\n  } catch (error) {\n    const message = stripAnsi((error as Error).message);\n    let errors: SchemaError[];\n    let errType: ErrorTypes;\n\n    if (message.includes(\"error: \")) {\n      errors = parseDMMFError(message);\n      errType = ErrorTypes.Prisma;\n    } else {\n      errors = [{ reason: message, row: \"0\" }];\n      errType = ErrorTypes.Other;\n    }\n\n    return { errors, type: errType };\n  }\n};\n\nconst errRegex =\n  /^(?:Error validating.*?:)?(.+?)\\n  -->  schema\\.prisma:(\\d+)\\n/;\n\nconst parseDMMFError = (error: string): SchemaError[] =>\n  error\n    .split(\"error: \")\n    .slice(1)\n    .map((msg) => msg.match(errRegex)!.slice(1))\n    .map(([reason, row]) => ({ reason, row }));\n","export * from \"./dmmfToSchema\";\nexport * from \"./schemaToDmmf\";\nexport * from \"@prisma/generator-helper\";\nexport { type ConfigMetaFormat, formatSchema } from \"@prisma/internals\";\n"],"mappings":"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","names":["fields","name","dbName","ErrorTypes","lineWords","index","formatSchema"]}